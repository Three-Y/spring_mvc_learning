<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--开启组件扫描，配置要扫描的包-->
    <context:component-scan base-package="yan.ibbie.controller"/>

    <!--
    InternalResourceViewResolver视图解析器
        配置视图的路径，简化视图的调用
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--路径的前缀-->
        <property name="prefix" value="/WEB-INF/views/"/>
        <!--路径的后缀-->
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--第一种静态资源的解决方法-->
    <!--
        1.添加<mvc:default-servlet-handler/>标签，框架会创建DefaultServletHttpRequestHandler的对象
          此对象可以把接收的请求转发给tomcat的default servlet
          但是，会造成与@RequestMapping的冲突，比如some.do之类的请求没有办法处理
        2.添加<mvc:annotation-driven/>标签，注解驱动
          它可以解决DefaultServletHttpRequestHandler与@RequestMapping的冲突

        优点：方便
        缺点：要保证tomcat种有default的servet，依赖于tomcat服务器
    -->
    <!--<mvc:annotation-driven/>-->
    <!--<mvc:default-servlet-handler/>-->


    <!--第二种静态资源的解决方法（推荐）-->
    <!--
        使用mvc:resources标签
            mapping：处理什么请求
            location：要从哪个路径下寻找需要的静态文件

        优点：不依赖于tomcat服务器
    -->
    <mvc:resources mapping="/js/**" location="/js/"/>
    <mvc:resources mapping="/imgs/**" location="/imgs/"/>
    <mvc:resources mapping="/html/**" location="/html/"/>

</beans>